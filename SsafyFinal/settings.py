"""
Django settings for SsafyFinal project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta # SIMPLE_JWT 설정에 필요

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dttekv%unyflha$!18v)xs!*t)b8*v-wz+t(*=!de4w=wv75q^' # 실제 프로덕션에서는 이 키를 안전하게 관리해야 합니다.

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [] # 프로덕션 환경에서는 실제 도메인/IP를 추가해야 합니다.


# Application definition

INSTALLED_APPS = [
    'apps.account.apps.AccountsConfig',
    'apps.movie.apps.MoviesConfig',
    'apps.content_management.apps.ContentManagementConfig',
    'apps.notification.apps.NotificationConfig',
    'apps.personalization.apps.PersonalizationConfig',
    'apps.review_community.apps.ReviewCommunityConfig',

    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders', # CORS 처리 앱

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

AUTH_USER_MODEL = 'account.Users' # 사용자 정의 User 모델 지정

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # [정리] 가능한 가장 위에 위치 (중복 제거)
    'django.middleware.security.SecurityMiddleware', # [정리] 중복 제거
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 아래 중복된 미들웨어 항목들은 제거했습니다.
    # 'corsheaders.middleware.CorsMiddleware', 
    # 'django.middleware.security.SecurityMiddleware',
]

ROOT_URLCONF = 'SsafyFinal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'SsafyFinal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST framework 설정
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # 'DEFAULT_PERMISSION_CLASSES': [ # API 전역 권한 설정 (필요시 주석 해제 및 수정)
    #     'rest_framework.permissions.IsAuthenticated',
    # ]
}

# Simple JWT 설정
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # 액세스 토큰 유효 기간 (예: 1시간)
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),    # 리프레시 토큰 유효 기간 (예: 7일)
    'ROTATE_REFRESH_TOKENS': True,                 # 리프레시 토큰 사용 시 새 리프레시 토큰 발급 여부
    'BLACKLIST_AFTER_ROTATION': True,              # 회전 시 이전 리프레시 토큰을 블랙리스트에 추가할지 여부
    'UPDATE_LAST_LOGIN': True,                     # 토큰 발급/갱신 시 사용자의 last_login 필드 업데이트 여부

    'ALGORITHM': 'HS256',                          # 서명 알고리즘
    'SIGNING_KEY': SECRET_KEY,                     # 서명 키 (settings.SECRET_KEY 사용)
    'VERIFYING_KEY': None,                         # 공개키 (비대칭 암호화 시 사용)
    'AUDIENCE': None,                              # 토큰 대상자 (Audience)
    'ISSUER': None,                                # 토큰 발급자 (Issuer)
    'JWK_URL': None,                               # JSON Web Key Set URL
    'LEEWAY': 0,                                   # 만료 시간 허용 오차 (초)

    'AUTH_HEADER_TYPES': ('Bearer',),              # 인증 헤더 타입 (일반적으로 'Bearer')
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',      # 인증 헤더 이름
    'USER_ID_FIELD': 'id',                         # 사용자 모델에서 사용자 ID를 나타내는 필드명 (Users 모델의 PK)
    'USER_ID_CLAIM': 'user_id',                    # JWT 클레임에 포함될 사용자 ID의 이름
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule', # 사용자 인증 규칙

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',), # 사용할 액세스 토큰 클래스
    'TOKEN_TYPE_CLAIM': 'token_type',              # 토큰 타입을 나타내는 클레임 이름
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser', # 토큰으로부터 생성될 사용자 클래스

    'JTI_CLAIM': 'jti',                            # JWT ID 클레임 이름 (토큰 고유 식별자)

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp', # 슬라이딩 토큰 사용 시 리프레시 만료 클레임
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),    # 슬라이딩 토큰 액세스 토큰 유효 기간
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1), # 슬라이딩 토큰 리프레시 토큰 유효 기간
}

# [정리] Git 충돌 해결 및 CORS, GOOGLE_CLIENT_ID 설정 부분
# CORS 설정 (Cross-Origin Resource Sharing)
CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173',  # Vue.js 개발 서버 주소 (Vite 기본값, 실제 사용하는 포트로 변경)
    'http://127.0.0.1:5173',
]
# 만약 Vue.js 개발 서버가 다른 포트를 사용한다면 해당 포트를 추가해야 합니다.
# 프로덕션 환경에서는 실제 프론트엔드 도메인을 추가합니다.
# 예: 'https://your-frontend-domain.com'

# CORS_ALLOW_CREDENTIALS = True # 쿠키 기반 인증 시 필요할 수 있음 (JWT에서는 보통 False)

# 개발 중 모든 출처를 허용하려면 아래 주석을 해제 (보안에 유의, 배포 시에는 반드시 False 또는 제거)
# CORS_ALLOW_ALL_ORIGINS = True 

# Google OAuth Client ID (백엔드에서 토큰 검증 시 필요)
# Vue.js에서 사용한 Client ID와 동일한 Google Cloud Console의 "웹 애플리케이션"용 ID여야 합니다.
GOOGLE_CLIENT_ID = "24120708973-o7fr06vmr3qdhvf6h6mb6mjp3gfhttim.apps.googleusercontent.com"
# 위 값은 예시이므로, 실제 Google Cloud Console에서 발급받은 정확한 클라이언트 ID로 교체해야 합니다.
# 환경 변수로 관리하는 것을 권장합니다. (예: os.environ.get('GOOGLE_CLIENT_ID'))